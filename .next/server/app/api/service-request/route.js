"use strict";(()=>{var e={};e.id=8346,e.ids=[8346],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6003:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>f,patchFetch:()=>h,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>v,staticGenerationAsyncStorage:()=>g});var s={};r.r(s),r.d(s,{GET:()=>p,POST:()=>d});var n=r(36126),i=r(69184),a=r(36197),o=r(53524),u=r(81602);let c=new o.PrismaClient;async function p(e){try{let{searchParams:t}=new URL(e.url),r=t.get("ngoID"),s=t.get("victimID"),n=t.get("status"),i=t.get("requestType"),a=t.get("urgencyLevel"),o=t.get("startDate"),p=t.get("endDate"),d=t.get("staffID"),l={};(o||p)&&(l={...o&&{gte:new Date(o)},...p&&{lte:new Date(p)}});let m={where:{...r&&{ngoID:parseInt(r)},...s&&{birthCertificateNumber:parseInt(s)},...n&&{status:n},...i&&{requestType:{contains:i,mode:"insensitive"}},...a&&{urgencyLevel:a},...Object.keys(l).length>0&&{requestDate:l},...d&&{respondedBy:parseInt(d)}},include:{victim:{select:{name:!0,status:!0}},ngo:{select:{name:!0}},ngoStaff:{select:{name:!0,role:!0}},_count:{select:{serviceItems:!0}}},orderBy:{requestDate:"desc"}},g=await c.ServiceRequest.findMany(m);return u.NextResponse.json(g)}catch(e){return console.error("Error fetching service requests:",e),u.NextResponse.json({error:"Failed to fetch service requests",details:e.message},{status:500})}}async function d(e){try{let{birthCertificateNumber:t,ngoID:r,requestType:s,urgencyLevel:n,notes:i,serviceItems:a}=await e.json();if(!t||!r||!s||!n)return u.NextResponse.json({error:"Missing required fields"},{status:400});if(isNaN(parseInt(t))||isNaN(parseInt(r)))return u.NextResponse.json({error:"Invalid victim or NGO ID"},{status:400});if(!["high","medium","low"].includes(n.toLowerCase()))return u.NextResponse.json({error:"Urgency level must be high, medium, or low"},{status:400});if(!await c.Victim.findUnique({where:{birthCertificateNumber:parseInt(t)}}))return u.NextResponse.json({error:"Victim not found"},{status:404});let o=await c.NGO.findUnique({where:{ngoID:parseInt(r)}});if(!o)return u.NextResponse.json({error:"NGO not found"},{status:404});let p=await c.ServiceRequest.create({data:{birthCertificateNumber:parseInt(t),ngoID:parseInt(r),requestType:s,urgencyLevel:n.toLowerCase(),status:"pending",...i&&{notes:i},...a&&{serviceItems:{create:a.map(e=>({serviceType:e.serviceType,quantity:e.quantity||1,status:"pending",...e.notes&&{notes:e.notes}}))}}},include:{serviceItems:!0}});return await c.VictimNeed.upsert({where:{needID:-1},update:{},create:{birthCertificateNumber:parseInt(t),needType:s,urgencyLevel:n.toLowerCase(),status:"pending",notes:`Service requested from ${o.name}`}}).catch(e=>{console.error("Non-fatal error creating need record:",e)}),u.NextResponse.json(p,{status:201})}catch(e){return console.error("Error creating service request:",e),u.NextResponse.json({error:"Failed to create service request",details:e.message},{status:500})}}let l=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/service-request/route",pathname:"/api/service-request",filename:"route",bundlePath:"app/api/service-request/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/service-request/route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:g,serverHooks:v}=l,f="/api/service-request/route";function h(){return(0,a.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:g})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9576,4946],()=>r(6003));module.exports=s})();