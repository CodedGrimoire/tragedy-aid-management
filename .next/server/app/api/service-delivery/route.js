"use strict";(()=>{var e={};e.id=6858,e.ids=[6858],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},91542:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>m,patchFetch:()=>I,requestAsyncStorage:()=>v,routeModule:()=>p,serverHooks:()=>g,staticGenerationAsyncStorage:()=>f});var s={};r.r(s),r.d(s,{GET:()=>d,POST:()=>u});var a=r(36126),i=r(69184),n=r(36197),o=r(53524),l=r(81602);let c=new o.PrismaClient;async function d(e){try{let{searchParams:t}=new URL(e.url),r=t.get("serviceID"),s=t.get("staffID"),a=t.get("startDate"),i=t.get("endDate"),n=t.get("followupNeeded"),o=t.get("effectivenessRating"),d=t.get("location"),u={};(a||i)&&(u={...a&&{gte:new Date(a)},...i&&{lte:new Date(i)}});let p={where:{...r&&{serviceID:parseInt(r)},...s&&{staffID:parseInt(s)},...Object.keys(u).length>0&&{deliveryDate:u},...null!==n&&{followupNeeded:"true"===n},...o&&{effectivenessRating:parseInt(o)},...d&&{location:{contains:d,mode:"insensitive"}}},include:{service:{select:{serviceType:!0,victim:{select:{name:!0,birthCertificateNumber:!0}},ngo:{select:{name:!0}}}},staff:{select:{name:!0,role:!0}}},orderBy:{deliveryDate:"desc"}},v=await c.serviceDeliveryLog.findMany(p);return l.NextResponse.json(v)}catch(e){return console.error("Error fetching delivery logs:",e),l.NextResponse.json({error:"Failed to fetch delivery logs"},{status:500})}}async function u(e){try{let{serviceID:t,staffID:r,deliveryDate:s,location:a,feedback:i,effectivenessRating:n,followupNeeded:o,followupDate:d,notes:u,latitude:p,longitude:v}=await e.json();if(!t||!r)return l.NextResponse.json({error:"Missing required fields"},{status:400});if(isNaN(parseInt(t))||isNaN(parseInt(r)))return l.NextResponse.json({error:"Invalid service or staff ID"},{status:400});if(void 0!==n&&(isNaN(parseInt(n))||1>parseInt(n)||parseInt(n)>5))return l.NextResponse.json({error:"Effectiveness rating must be between 1 and 5"},{status:400});let f=await c.nGO_Service_Provided.findUnique({where:{serviceID:parseInt(t)}});if(!f)return l.NextResponse.json({error:"Service not found"},{status:404});let g=await c.nGO_Staff.findUnique({where:{staffID:parseInt(r)}});if(!g)return l.NextResponse.json({error:"Staff member not found"},{status:404});if(g.ngoID!==f.ngoID)return l.NextResponse.json({error:"Staff member must belong to the same NGO as the service provider"},{status:400});let m=await c.serviceDeliveryLog.create({data:{serviceID:parseInt(t),staffID:parseInt(r),...s&&{deliveryDate:new Date(s)},...a&&{location:a},...i&&{feedback:i},...void 0!==n&&{effectivenessRating:parseInt(n)},...void 0!==o&&{followupNeeded:!!o},...d&&{followupDate:new Date(d)},...u&&{notes:u},...void 0!==p&&{latitude:parseFloat(p)},...void 0!==v&&{longitude:parseFloat(v)}},include:{service:{select:{serviceType:!0,victim:{select:{name:!0}}}},staff:{select:{name:!0}}}});return"active"!==f.status&&await c.nGO_Service_Provided.update({where:{serviceID:parseInt(t)},data:{status:"active"}}),l.NextResponse.json(m,{status:201})}catch(e){return console.error("Error creating delivery log:",e),l.NextResponse.json({error:"Failed to create delivery log"},{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/service-delivery/route",pathname:"/api/service-delivery",filename:"route",bundlePath:"app/api/service-delivery/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/service-delivery/route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:v,staticGenerationAsyncStorage:f,serverHooks:g}=p,m="/api/service-delivery/route";function I(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:f})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9576,4946],()=>r(91542));module.exports=s})();