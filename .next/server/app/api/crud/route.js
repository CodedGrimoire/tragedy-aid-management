"use strict";(()=>{var e={};e.id=7202,e.ids=[7202],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},676:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>y,patchFetch:()=>f,requestAsyncStorage:()=>g,routeModule:()=>p,serverHooks:()=>v,staticGenerationAsyncStorage:()=>h});var i={};r.r(i),r.d(i,{DELETE:()=>m,GET:()=>u,PUT:()=>d});var a=r(36126),n=r(69184),s=r(36197),o=r(53524),c=r(81602);let l=new o.PrismaClient;async function u(){try{let e=await l.victim.findMany({include:{medical:!0,family:!0,event:!0,tragedyVictims:{include:{tragedy:!0}}}});return console.log("✅ Victims fetched successfully:",e),c.NextResponse.json(e)}catch(e){return console.error("❌ Database Fetch Error:",e),c.NextResponse.json({error:"Failed to fetch victims."},{status:500})}}async function d(e){try{let{birthCertificateNumber:t,name:r,status:i,medicalID:a,eventID:n,eventDescription:s,eventLocation:o,familyID:u,familyHead:d,tragedyID:m,tragedyName:p}=await e.json();console.log("\uD83D\uDD39 Incoming update request:",{birthCertificateNumber:t,name:r,status:i,medicalID:a,eventID:n,eventDescription:s,eventLocation:o,familyID:u,familyHead:d,tragedyID:m,tragedyName:p});let g=n?parseInt(n):null,h=m?parseInt(m):null;if(!g&&""!==s.trim()){console.log("\uD83C\uDD95 Creating new event...");let e=await l.event.create({data:{description:s,location:o,date:new Date}});g=e.eventID,console.log("✅ New event created:",e)}if(!h&&""!==p.trim()){console.log("\uD83C\uDD95 Creating new tragedy...");let e=await l.tragedy.create({data:{tragedyName:p}});h=e.tragedyID,console.log("✅ New tragedy created:",e)}if(d&&u&&(console.log("\uD83D\uDEE0 Updating family head..."),await l.familyInfo.update({where:{familyID:parseInt(u)},data:{headName:d}}),console.log("✅ Family head updated:",d)),!await l.victim.findUnique({where:{birthCertificateNumber:parseInt(t)}}))return console.error(`❌ Victim with ID ${t} not found!`),c.NextResponse.json({error:"Victim not found."},{status:404});console.log("\uD83D\uDEE0 Updating victim...");let v=await l.victim.update({where:{birthCertificateNumber:parseInt(t)},data:{name:r,status:i,medicalID:a,eventID:g||null,familyID:parseInt(u)}});return console.log("✅ Victim updated successfully:",v),h&&(await l.tragedyVictim.findFirst({where:{birthCertificateNumber:parseInt(t),tragedyID:h}})?console.log(`⚠️ Victim ${t} is already linked to tragedy ${h}`):(console.log("\uD83C\uDD95 Linking victim to tragedy..."),await l.tragedyVictim.create({data:{tragedyID:h,birthCertificateNumber:parseInt(t)}}),console.log(`✅ Victim ${t} linked to tragedy ${h}`))),c.NextResponse.json(v)}catch(e){return console.error("❌ Error updating victim:",e),c.NextResponse.json({error:"Error updating victim.",details:e.message},{status:500})}}async function m(e){try{let{birthCertificateNumber:t}=await e.json();if(console.log(`🗑 Attempting to delete victim with ID: ${t}`),!t)return c.NextResponse.json({error:"Birth Certificate Number is required."},{status:400});let r=parseInt(t),i=await l.victim.findUnique({where:{birthCertificateNumber:r},include:{tragedyVictims:!0,govtSubsidies:!0,ngoServices:{include:{deliveryLogs:!0}},serviceRequests:{include:{serviceItems:!0}},needs:!0}});if(!i)return console.log(`❌ Victim with ID ${r} not found.`),c.NextResponse.json({error:"Victim not found."},{status:404});return console.log("\uD83D\uDD04 Removing related records..."),await l.serviceItem.deleteMany({where:{requestID:{in:i.serviceRequests.map(e=>e.requestID)}}}),await l.serviceDeliveryLog.deleteMany({where:{serviceID:{in:i.ngoServices.map(e=>e.serviceID)}}}),await l.tragedyVictim.deleteMany({where:{birthCertificateNumber:r}}),await l.governmentSubsidy.deleteMany({where:{birthCertificateNumber:r}}),await l.nGO_Service_Provided.deleteMany({where:{birthCertificateNumber:r}}),await l.serviceRequest.deleteMany({where:{birthCertificateNumber:r}}),await l.victimNeed.deleteMany({where:{birthCertificateNumber:r}}),console.log("✅ All related records deleted successfully."),await l.victim.delete({where:{birthCertificateNumber:r}}),console.log(`✅ Victim with ID ${r} deleted successfully.`),c.NextResponse.json({message:"Victim deleted successfully."})}catch(e){return console.error("❌ Error deleting victim:",e),c.NextResponse.json({error:"Error deleting victim.",details:e.message},{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/crud/route",pathname:"/api/crud",filename:"route",bundlePath:"app/api/crud/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/crud/route.js",nextConfigOutput:"",userland:i}),{requestAsyncStorage:g,staticGenerationAsyncStorage:h,serverHooks:v}=p,y="/api/crud/route";function f(){return(0,s.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:h})}}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),i=t.X(0,[9576,4946],()=>r(676));module.exports=i})();