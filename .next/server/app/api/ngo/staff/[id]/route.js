"use strict";(()=>{var e={};e.id=2691,e.ids=[2691],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3183:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>h,patchFetch:()=>x,requestAsyncStorage:()=>v,routeModule:()=>p,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var s={};r.r(s),r.d(s,{DELETE:()=>l,GET:()=>d,PUT:()=>c});var n=r(36126),a=r(69184),i=r(36197),o=r(53524),u=r(81602);let f=new o.PrismaClient;async function d(e,{params:t}){try{let e=parseInt(t.id);if(isNaN(e))return u.NextResponse.json({error:"Invalid staff ID"},{status:400});let r=await f.nGO_Staff.findUnique({where:{staffID:e},include:{ngo:{select:{name:!0,contact:!0,supportType:!0}},serviceRequests:{select:{requestID:!0,requestType:!0,status:!0,requestDate:!0,victim:{select:{birthCertificateNumber:!0,name:!0,status:!0}}},take:10,orderBy:{requestDate:"desc"}},serviceDeliveryLogs:{select:{logID:!0,deliveryDate:!0,effectivenessRating:!0,service:{select:{serviceType:!0,victim:{select:{name:!0,birthCertificateNumber:!0}}}}},take:10,orderBy:{deliveryDate:"desc"}},_count:{select:{serviceRequests:!0,serviceDeliveryLogs:!0}}}});if(!r)return u.NextResponse.json({error:"Staff member not found"},{status:404});return u.NextResponse.json(r)}catch(e){return console.error("Error fetching staff member:",e),u.NextResponse.json({error:"Failed to fetch staff member"},{status:500})}}async function c(e,{params:t}){try{let r=parseInt(t.id);if(isNaN(r))return u.NextResponse.json({error:"Invalid staff ID"},{status:400});let{name:s,role:n,contact:a,email:i,specialization:o,isActive:d}=await e.json(),c=await f.nGO_Staff.findUnique({where:{staffID:r}});if(!c)return u.NextResponse.json({error:"Staff member not found"},{status:404});if(i&&i!==c.email&&await f.nGO_Staff.findUnique({where:{email:i}}))return u.NextResponse.json({error:"Email is already in use"},{status:400});let l=await f.nGO_Staff.update({where:{staffID:r},data:{...void 0!==s&&{name:s},...void 0!==n&&{role:n},...void 0!==a&&{contact:a},...void 0!==i&&{email:i},...void 0!==o&&{specialization:o},...void 0!==d&&{isActive:!!d}}});return u.NextResponse.json(l)}catch(e){return console.error("Error updating staff member:",e),u.NextResponse.json({error:"Failed to update staff member"},{status:500})}}async function l(e,{params:t}){try{let e=parseInt(t.id);if(isNaN(e))return u.NextResponse.json({error:"Invalid staff ID"},{status:400});let r=await f.nGO_Staff.findUnique({where:{staffID:e},include:{serviceRequests:!0,serviceDeliveryLogs:!0}});if(!r)return u.NextResponse.json({error:"Staff member not found"},{status:404});if(r.serviceRequests.length>0||r.serviceDeliveryLogs.length>0)return u.NextResponse.json({error:"Cannot delete staff member with related service records. Consider marking as inactive instead.",serviceRequests:r.serviceRequests.length,serviceDeliveryLogs:r.serviceDeliveryLogs.length},{status:400});return await f.nGO_Staff.delete({where:{staffID:e}}),u.NextResponse.json({message:"Staff member deleted successfully"})}catch(e){return console.error("Error deleting staff member:",e),u.NextResponse.json({error:"Failed to delete staff member"},{status:500})}}let p=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/ngo/staff/[id]/route",pathname:"/api/ngo/staff/[id]",filename:"route",bundlePath:"app/api/ngo/staff/[id]/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/ngo/staff/[id]/route.js",nextConfigOutput:"",userland:s}),{requestAsyncStorage:v,staticGenerationAsyncStorage:m,serverHooks:g}=p,h="/api/ngo/staff/[id]/route";function x(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9576,4946],()=>r(3183));module.exports=s})();