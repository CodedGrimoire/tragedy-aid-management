"use strict";(()=>{var e={};e.id=9394,e.ids=[9394],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},11031:(e,t,i)=>{i.r(t),i.d(t,{originalPathname:()=>f,patchFetch:()=>h,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>v,staticGenerationAsyncStorage:()=>p});var r={};i.r(r),i.d(r,{GET:()=>d,POST:()=>u});var s=i(36126),n=i(69184),a=i(36197),o=i(81602),c=i(30482);async function u(e){try{let{birthCertificateNumber:t,name:i,gender:r,status:s,medicalID:n,eventID:a,familyID:u}=await e.json();if(!t||!i||!n||!a||!u)return o.NextResponse.json({error:"Missing required fields!",details:"Birth certificate number, name, medical ID, event ID, and family ID are required"},{status:400});let d=parseInt(t,10),l=parseInt(a,10),m=parseInt(u,10);if(isNaN(d)||isNaN(l)||isNaN(m))return o.NextResponse.json({error:"Invalid numeric values",details:"Birth certificate number, event ID, and family ID must be valid numbers"},{status:400});let p=await c.Z.victim.create({data:{birthCertificateNumber:d,name:i,gender:r||null,status:s||null,medicalID:n,eventID:l,familyID:m},include:{medical:!0,event:!0,family:!0}});return o.NextResponse.json({message:"Victim added successfully",victim:p},{status:201})}catch(e){if(console.error("Error adding victim:",e),"P2002"===e.code)return o.NextResponse.json({error:"Duplicate record",details:"A victim with this birth certificate number already exists"},{status:409});if("P2003"===e.code)return o.NextResponse.json({error:"Foreign key constraint failed",details:"One of the referenced records does not exist (medicalID, eventID, or familyID)"},{status:400});return o.NextResponse.json({error:"Internal Server Error",details:e.message},{status:500})}}async function d(e){try{let{searchParams:t}=new URL(e.url),i=parseInt(t.get("limit"))||10,r=t.get("search")||"",s=t.get("birthCertificateNumber");if(s){let e=parseInt(s,10);if(isNaN(e))return o.NextResponse.json({error:"Invalid birth certificate number format"},{status:400});let t=await c.Z.victim.findUnique({where:{birthCertificateNumber:e},include:{medical:!0,event:!0,family:!0}});if(!t)return o.NextResponse.json({error:"Victim not found"},{status:404});return o.NextResponse.json(t,{status:200})}let n=await c.Z.victim.findMany({take:i,where:{OR:[{name:{contains:r,mode:"insensitive"}},{medicalID:{contains:r,mode:"insensitive"}},{medical:{medicalCondition:{contains:r,mode:"insensitive"}}},{event:{description:{contains:r,mode:"insensitive"}}},{event:{location:{contains:r,mode:"insensitive"}}}]},include:{event:!0,medical:!0,family:!0},orderBy:{createdAt:"desc"}});return o.NextResponse.json(n,{status:200})}catch(e){return console.error("GET /api/victim error:",e),o.NextResponse.json({error:"Failed to fetch victims",details:e.message},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/victim/route",pathname:"/api/victim",filename:"route",bundlePath:"app/api/victim/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/victim/route.js",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:p,serverHooks:v}=l,f="/api/victim/route";function h(){return(0,a.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:p})}},30482:(e,t,i)=>{i.d(t,{Z:()=>r});let r=new(i(53524)).PrismaClient}};var t=require("../../../webpack-runtime.js");t.C(e);var i=e=>t(t.s=e),r=t.X(0,[9576,4946],()=>i(11031));module.exports=r})();