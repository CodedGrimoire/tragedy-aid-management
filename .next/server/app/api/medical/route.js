"use strict";(()=>{var e={};e.id=2365,e.ids=[2365],e.modules={53524:e=>{e.exports=require("@prisma/client")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},15941:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>f,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>p,serverHooks:()=>v,staticGenerationAsyncStorage:()=>h});var i={};t.r(i),t.d(i,{DELETE:()=>u,GET:()=>c,POST:()=>d,PUT:()=>l});var a=t(36126),n=t(69184),s=t(36197),o=t(30482);async function c(){try{let e=await o.Z.victim.findMany({include:{medical:{include:{victimHealthcare:{include:{healthcareProvider:!0}}}}}}),r=await o.Z.healthcareProvider.findMany(),t=e.map(e=>{let r=e.medical?.victimHealthcare?.[0];return{victimID:e.birthCertificateNumber,victimName:e.name,providerID:r?.healthcareProvider?.providerID||null,providerName:r?.healthcareProvider?.name||"None",description:r?.description||"No Description",serviceDate:r?.serviceDate?new Date(r.serviceDate).toLocaleDateString():"N/A"}});return new Response(JSON.stringify({victims:t,healthcareProviders:r}),{status:200,headers:{"Content-Type":"application/json"}})}catch(e){return console.error("GET /api/medical error:",e),new Response(JSON.stringify({error:"Failed to fetch victims with healthcare details."}),{status:500,headers:{"Content-Type":"application/json"}})}}async function d(e){try{let{name:r,address:t,contact:i}=await e.json(),a=await o.Z.healthcareProvider.create({data:{name:r,address:t,contact:i}});return new Response(JSON.stringify(a),{status:201})}catch(e){return console.error("POST /api/medical error:",e),new Response(JSON.stringify({error:"Failed to create healthcare provider."}),{status:500})}}async function l(e){try{let{victimID:r,providerID:t}=await e.json(),i=await o.Z.medical.findFirst({where:{victim:{birthCertificateNumber:r}}});if(!i)return new Response(JSON.stringify({error:"Medical record not found for victim."}),{status:404});return await o.Z.victimHealthcare.upsert({where:{medicalID:i.medicalID},update:{providerID:t},create:{medicalID:i.medicalID,providerID:t}}),new Response(JSON.stringify({message:"Healthcare provider updated successfully"}),{status:200})}catch(e){return console.error("PUT /api/medical error:",e),new Response(JSON.stringify({error:"Failed to update healthcare provider."}),{status:500})}}async function u(e){try{let{victimID:r}=await e.json(),t=await o.Z.medical.findFirst({where:{victim:{birthCertificateNumber:r}}});if(!t)return new Response(JSON.stringify({error:"Medical record not found for victim."}),{status:404});return await o.Z.victimHealthcare.deleteMany({where:{medicalID:t.medicalID}}),new Response(JSON.stringify({message:"Healthcare provider removed successfully"}),{status:200})}catch(e){return console.error("DELETE /api/medical error:",e),new Response(JSON.stringify({error:"Failed to remove healthcare provider."}),{status:500})}}let p=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/medical/route",pathname:"/api/medical",filename:"route",bundlePath:"app/api/medical/route"},resolvedPagePath:"/Users/tazkia/Desktop/Uddhar/app/api/medical/route.js",nextConfigOutput:"",userland:i}),{requestAsyncStorage:m,staticGenerationAsyncStorage:h,serverHooks:v}=p,f="/api/medical/route";function w(){return(0,s.patchFetch)({serverHooks:v,staticGenerationAsyncStorage:h})}},30482:(e,r,t)=>{t.d(r,{Z:()=>i});let i=new(t(53524)).PrismaClient},36126:(e,r,t)=>{e.exports=t(30517)}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),i=r.X(0,[9576],()=>t(15941));module.exports=i})();